name: Build, Push to ECR and Deploy to EKS Cluster

on:
  push:
    branches:
      - main
env:
  SHA: ${git rev-parse HEAD}
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        id: install
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.CLUSTER_REGION}}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Create ECR repositories if they don't exist
        run: |
          if ! aws ecr describe-repositories --repository-names demo-frontend &>/dev/null; then
            echo "Creating demo-frontend repository"
            aws ecr create-repository --repository-name demo-frontend
          else
            echo "demo-frontend repository already exists"
          fi
          
          if ! aws ecr describe-repositories --repository-names demo-backend &>/dev/null; then
            echo "Creating demo-backend repository"
            aws ecr create-repository --repository-name demo-backend
          else
            echo "demo-backend repository already exists"
          fi


      - name: Build Tag and push images to Amazon ECR
        env:
          ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
          ECR_REPOSITORY_FRONTEND: demo-frontend
          ECR_REPOSITORY_BACKEND: demo-backend
          IMAGE_TAG: ${{github.sha}}
        run: |
            
            # Build Backend
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG backend/
            
            #build frontend image
            docker build --network=host --build-arg API_HOST=localhost --build-arg API_PORT=8080 -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG frontend/

            # pushing built images 
            docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
      
      - name: Create Kube config 
        run: |
          mkdir ${HOME}/.kube
          echo ${{secrets.KUBE_CONFIG}} | base64 --decode > ${HOME}/.kube/config
      - name: Use Context 
        run: kubectl config use-context EKS_CONTEXT

      - name: Create Kubectl Secrets 
        run: >
          kubectl get secret pgsecret &>/dev/null &&
          echo "Updating existing pgsecret" &&
          kubectl delete secret pgsecret ||
          echo "Creating new pgsecret";
          kubectl create secret generic pgsecret
          --from-literal=PGPORT=${{secrets.PGPORT}}
          --from-literal=PGDATABASE=${{secrets.PGDATABASE}}
          --from-literal=PGUSER=${{secrets.PGUSER}}
          --from-literal=PGPASSWORD=${{secrets.PGPASSWORD}}
      - name: Deploy to EKS
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/cloud/deploy.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl set image deployments/frontend-deployment frontend=$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          kubectl set image deployments/backend-deployment backend=$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          sleep 20
          kubectl apply -f k8s/service.yaml



            